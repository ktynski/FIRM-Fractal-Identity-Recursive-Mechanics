name: FIRM Theory CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov pytest-xdist hypothesis
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        mypy foundation constants structures --ignore-missing-imports --no-strict-optional
      continue-on-error: true
    
    - name: Run contamination scan
      run: |
        python -m validation.anti_contamination --pre-commit
    
    - name: Run mathematical foundation tests
      run: |
        python -m pytest testing/foundation/ -v --tb=short
    
    - name: Run axiom independence tests
      run: |
        python -m pytest testing/axioms/ -v --tb=short
    
    - name: Run constants derivation tests
      run: |
        python -m pytest testing/constants/ -v --tb=short
    
    - name: Run structures tests
      run: |
        python -m pytest testing/structures/ -v --tb=short
    
    - name: Run provenance integrity tests
      run: |
        python -m pytest testing/provenance/ -v --tb=short
    
    - name: Run validation tests
      run: |
        python -m pytest testing/validation/ -v --tb=short
    
    - name: Run integration tests
      run: |
        python -m pytest testing/integration/ -v --tb=short
    
    - name: Run performance tests (non-slow)
      run: |
        python -m pytest testing/performance/ -v --tb=short -m "not slow"
    
    - name: Generate coverage report
      run: |
        python -m pytest --cov=foundation --cov=constants --cov=structures --cov=cosmology --cov=validation --cov=provenance --cov-report=xml --cov-report=term-missing --cov-fail-under=95 --tb=short
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run complete system integration test
      run: |
        python -m pytest testing/integration/test_complete_system.py -v --tb=line
        
    - name: Run executable proof pipeline test
      run: |
        python -m pytest testing/integration/test_executable_proof_pipeline.py -v --tb=line

  performance-benchmark:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-benchmark
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run performance benchmarks
      run: |
        python -m pytest testing/performance/ -v --tb=short -m "benchmark"
      continue-on-error: true

  quality-gates:
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Generate quality report
      run: |
        echo "=== FIRM Theory Quality Gates ===" > quality_report.txt
        echo "Date: $(date)" >> quality_report.txt
        echo "" >> quality_report.txt
        echo "Coverage Report:" >> quality_report.txt
        python -m pytest --cov=foundation --cov=constants --cov=structures --cov=cosmology --cov=validation --cov=provenance --cov-report=term >> quality_report.txt || true
        echo "" >> quality_report.txt
        echo "Integration Test Results:" >> quality_report.txt
        python -m pytest testing/integration/ --tb=no -q >> quality_report.txt || true
        echo "" >> quality_report.txt
        echo "Contamination Scan Results:" >> quality_report.txt
        python -m validation.anti_contamination >> quality_report.txt || true
        
    - name: Upload quality report
      uses: actions/upload-artifact@v3
      with:
        name: quality-report
        path: quality_report.txt

  pre-commit-checks:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install pre-commit
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit
        pip install -e .
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files
      continue-on-error: true
